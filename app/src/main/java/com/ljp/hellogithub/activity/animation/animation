一、Viwe动画种类(4种):
    TranslateAnimation、ScaleAnimation、RotateAnimation和AlphaAnimation。
    移动view、放大或缩小、旋转view和改变view的透明度
   属性:
    android:interpolator:表示动画集合所采用的插值器,插值器影响动画的速度,比如非匀速动画就需要通过插值器
                         来控制动画的播放过程
    android:shareInterpolator:表示集合中的动画是否和集合共享同一个插值器,如果集合不指定插值器,那么子动
                         画就需要单独制定所需的插值器或者使用默认值
    android:duration:动画持续时间
    android:fillAfter:动画结束以后View是否停留在结束为止,true表示view停留在结束位置,false则不停留

二、自定义动画:

三、帧动画:AnimationDrawable
         图片xml放在drawable下面

四、动画的特殊使用场景:
   1.LayoutAnimation:
   2.activity切换界面动画:
     用到overridePendingTransition(int enterAnim,int exitAnim),这个方法必须在startActivity(Intent)
     或者finish()之后被调用才能生效
     (1)enterAnim--activity被打开时,所需的动画资源
     (2)exitAnim--activity被暂停时,调用的动画资源
   3.fragment切换动画可以通过FragmentTransaction中的setCustomAnimations()方法来添加切换动画

五、属性动画:也可以用Nineoldandroids动画兼容库,兼容api11

   1.比较常用的几个动画类是:ValueAnimator、ObjectAnimator和SetAnimator。
     ValueAnimator:
     (1).ValueAnimator的ofFloat()和ofInt()方法:分别用于对浮点型和整型的数据进行动画操作的
     (2).但实际上ValueAnimator中还有一个ofObject()方法，是用于对任意对象进行动画操作的,
         但是相比于浮点型或整型数据，对象的动画操作明显要更复杂一些，因为系统将完全无法知道如何从初始对象过度到结束对象，
         因此这个时候我们就需要实现一个自己的TypeEvaluator来告知系统如何进行过度。

   2.也可在xml中定义属性动画,放在animator文件夹下面,属性:
     android:propertyName--表示属性动画的作用对象的属性的名称;
     android:valueFrom--表示属性的起始值;
     android:valueTo--表示属性的结束值;
     android:startOffset--表示动画的延迟时间,当动画开始后,需要延迟多少毫秒才会真正播放此动画;
     android:repeatCount--表示动画的重复次数,默认为0,-1为无限循环;
     android:repeatMode--表示动画重复的模式,有两个选项repeat和reverse,分别表示连续重复和逆向重复。
                         逆向重复表示第一次播放完后,第二次会倒着播放,第三次再重头开始播放,第四次再倒着播放;
     android:valueType--表示android:propertyName所指定的属性的类型,有"intType"和"floatType"两个可选项
                        android:propertyName所指定的属性表示的是颜色,则不需要指定valueType,系统会自动对
                        颜色的属性做处理
    3.插值器和估值器:interpolator、evaluator
    4.属性动画的监听:
      主要两个接口AnimatorUpdateListener和AnimatorListener
    5.对任意属性做动画
      属性动画要求动画作用的对象提供该属性的set和get方法,比如对object的属性abc做动画,如果想让动画生效,要同时
      满足以下两个条件:
      (1)object必须要提供setAbc方法,如果动画的时候没有传递初始值,那么还要提供getAbc方法,因为系统要去取abc属
         性的初始值(如果这条不满足,程序会直接crash)
      (2)object的setAbc对属性abc所做的改变必需能够通过某种方法反映出来,比如带来UI的改变之类的(如果这条件不满
         足,动画无效果但不会crash)

      对于属性没有起作用或者目标view没有这个属性时谷歌给出了三个解决方法:
      (1)给你的对象加上get和set方法,如果你有权限的话;
      (2)用一个类来包装原始对象,间接为其提供get和set方法;
      (3)采用ValueAnimator,监听动画过程,自己实现属性的改变;


    View的requestLayout方法的作用:
    　如果View对应的位置已经发生了变化，原来被他覆盖的内容需要被显示出来。这时，如果只重新绘制当前View，已经起不到效果。这就需要requestLayout来实现重绘当前View和父View，甚至更上层的View，以此类推。

